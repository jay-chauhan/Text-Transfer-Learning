library(data.table)
library(ggplot2)
library(tm)
library(SnowballC)
# read in data
dat_bio <- read.csv('biology.csv', stringsAsFactors = F)
dat_cook <- read.csv('cooking.csv', stringsAsFactors = F)
dat_crypt <- read.csv('crypto.csv', stringsAsFactors = F)
dat_diy <- read.csv('diy.csv', stringsAsFactors = F)
dat_robot <- read.csv('robotics.csv', stringsAsFactors = F)
dat_travel <- read.csv('travel.csv', stringsAsFactors = F)
# attach a category label
dat_bio$category <- 'biology'
dat_cook$category <- 'cooking'
dat_crypt$category <- 'crypto'
dat_diy$category <- 'diy'
dat_robot$category <- 'robotics'
dat_travel$category <- 'travel'
# combine and remove from environment
dat_all <- rbind(dat_bio, dat_cook, dat_crypt, dat_diy, dat_robot, dat_travel)
rm(dat_bio, dat_cook, dat_crypt, dat_diy, dat_robot, dat_travel)
# duplicate id values across categories, concat id to category and we're good
print(sum(duplicated(dat_all$id)))  # 27,441
library(dplyr)
unique(dat_all$category)
#
# # removes all html tags
# remove_html_tags <- function(htmlString) {
#     return(gsub("<.*?>", "", htmlString))
# }
#
#
# # custom tokenizer
# custom_tokenizer <- function(param_big_string) {
#     #' lower-cases, removes punctuation, new line and return characters,
#     #' and removes unnecessary whitespace, then strsplits
#     split_content <- sapply(param_big_string, removePunctuation, preserve_intra_word_dashes=T)
#     split_content <- sapply(split_content, function(y) gsub("[\r\n]", " ", y))
#     split_content <- sapply(split_content, tolower)
#     split_content <- sapply(split_content, function(y) gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", y, perl=TRUE))
#
#     return(split_content)
#     #return(split_content <- (sapply(split_content, strsplit, " ")))
# }
#
# custom_preprocess<-function(text,stem=TRUE){
#   corpus <- Corpus(VectorSource(text))
#   docs <- tm_map(corpus, removeWords, stopwords("english"))
#   docs <- tm_map(docs, PlainTextDocument)
#   if(stem==TRUE){
#     docs <- tm_map(docs, stemDocument, "english")
#   }
#   return(docs$content)
# }
# # quick clean on content column
# dat_all$content <- remove_html_tags(dat_all$content)
#
# # tokenize
# dat_all$content <- custom_tokenizer(dat_all$content)
# dat_all$tags <- custom_tokenizer(dat_all$tags)
# dat_all$title <- custom_tokenizer(dat_all$title)
#
# dat_all$content<-custom_preprocess(dat_all$content)
# dat_all$tags<-custom_preprocess(dat_all$tags,FALSE)
# dat_all$title<-custom_preprocess(dat_all$title)
#
head(dat_all)
#Merging title and content and creating a corpus
dat_all$title_content =  paste(dat_all$title, dat_all$content, sep=" ")
# removes all html tags
remove_html_tags <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
title_content_pre=remove_html_tags(dat_all$title_content)
title_content_corpus = Corpus(VectorSource(title_content_pre))
title_content_corpus <- tm_map(title_content_corpus, content_transformer(tolower))
title_content_corpus <- tm_map(title_content_corpus, removeNumbers)
title_content_corpus <- tm_map(title_content_corpus, removePunctuation)
title_content_corpus <- tm_map(title_content_corpus, removeWords, c("the", "and", stopwords("english")))
title_content_corpus <-  tm_map(title_content_corpus, stripWhitespace)
title_content_corpus<- tm_map(title_content_corpus, stemDocument, "english")
head(title_content_corpus$content)
title_content_dtm <- DocumentTermMatrix(title_content_corpus)
title_content_dtm
inspect(title_content_dtm[500:505, 500:505])
title_content_dtm = removeSparseTerms(title_content_dtm, 0.99)
title_content_dtm
library(wordcloud)
freq = data.frame(sort(colSums(as.matrix(title_content_dtm)), decreasing=TRUE))
wordcloud(rownames(freq), freq[,1], max.words=50, colors=brewer.pal(1, "Dark2"))
title_content_dtm_tfidf <- DocumentTermMatrix(title_content_corpus, control = list(weighting = weightTfIdf))
title_content_dtm_tfidf = removeSparseTerms(title_content_dtm_tfidf, 0.99)
title_content_dtm_tfidf
# The first document
inspect(title_content_dtm_tfidf[1,])
freq = data.frame(sort(colSums(as.matrix(title_content_dtm_tfidf)), decreasing=TRUE))
wordcloud(rownames(freq), freq[,1], max.words=100, colors=brewer.pal(1, "Dark2"))
dat_all_new = cbind(as.matrix(title_content_dtm_tfidf))
dat_all_new = data.frame(dat_all_new)
dat_all_train<-dat_all_new[1:(nrow(dat_all_new)-15000),]
dat_all_test<-tail(dat_all_new,15000)
#head(dat_all_new)
#dat_all_new  %>% mutate_if(is.factor,as.numeric)
tag_corpus = Corpus(VectorSource(dat_all$tags))
tag_corpus = tm_map(tag_corpus, content_transformer(tolower))
tag_corpus = tm_map(tag_corpus, stripWhitespace)
tag_corpus = tm_map(tag_corpus, removeNumbers)
tag_corpus = tm_map(tag_corpus, removePunctuation,preserve_intra_word_dashes=T)
library(qdapTools)
library(data.table)
library(ggplot2)
library(tm)
library(SnowballC)
# read in data
dat_bio <- read.csv('biology.csv', stringsAsFactors = F)
dat_cook <- read.csv('cooking.csv', stringsAsFactors = F)
dat_crypt <- read.csv('crypto.csv', stringsAsFactors = F)
dat_diy <- read.csv('diy.csv', stringsAsFactors = F)
dat_robot <- read.csv('robotics.csv', stringsAsFactors = F)
dat_travel <- read.csv('travel.csv', stringsAsFactors = F)
# attach a category label
dat_bio$category <- 'biology'
dat_cook$category <- 'cooking'
dat_crypt$category <- 'crypto'
dat_diy$category <- 'diy'
dat_robot$category <- 'robotics'
dat_travel$category <- 'travel'
# combine and remove from environment
dat_all <- rbind(dat_bio, dat_cook, dat_crypt, dat_diy, dat_robot, dat_travel)
rm(dat_bio, dat_cook, dat_crypt, dat_diy, dat_robot, dat_travel)
# duplicate id values across categories, concat id to category and we're good
print(sum(duplicated(dat_all$id)))  # 27,441
clear()
rm(list = ls())
library(data.table)
library(ggplot2)
library(tm)
library(SnowballC)
# read in data
dat_bio <- read.csv('biology.csv', stringsAsFactors = F)
dat_cook <- read.csv('cooking.csv', stringsAsFactors = F)
dat_crypt <- read.csv('crypto.csv', stringsAsFactors = F)
dat_diy <- read.csv('diy.csv', stringsAsFactors = F)
dat_robot <- read.csv('robotics.csv', stringsAsFactors = F)
dat_travel <- read.csv('travel.csv', stringsAsFactors = F)
# attach a category label
dat_bio$category <- 'biology'
dat_cook$category <- 'cooking'
dat_crypt$category <- 'crypto'
dat_diy$category <- 'diy'
dat_robot$category <- 'robotics'
dat_travel$category <- 'travel'
# combine and remove from environment
dat_all <- rbind(dat_bio, dat_cook, dat_crypt, dat_diy, dat_robot, dat_travel)
rm(dat_bio, dat_cook, dat_crypt, dat_diy, dat_robot, dat_travel)
# duplicate id values across categories, concat id to category and we're good
print(sum(duplicated(dat_all$id)))  # 27,441
library(dplyr)
unique(dat_all$category)
#
head(dat_all)
#Merging title and content and creating a corpus
dat_all$title_content =  paste(dat_all$title, dat_all$content, sep=" ")
# removes all html tags
remove_html_tags <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
title_content_pre=remove_html_tags(dat_all$title_content)
title_content_corpus = Corpus(VectorSource(title_content_pre))
title_content_corpus <- tm_map(title_content_corpus, content_transformer(tolower))
title_content_corpus <- tm_map(title_content_corpus, removeNumbers)
title_content_corpus <- tm_map(title_content_corpus, removePunctuation)
title_content_corpus <- tm_map(title_content_corpus, removeWords, c("the", "and", stopwords("english")))
title_content_corpus <-  tm_map(title_content_corpus, stripWhitespace)
title_content_corpus<- tm_map(title_content_corpus, stemDocument, "english")
head(title_content_corpus$content)
title_content_dtm <- DocumentTermMatrix(title_content_corpus)
title_content_dtm
inspect(title_content_dtm[500:505, 500:505])
title_content_dtm = removeSparseTerms(title_content_dtm, 0.99)
title_content_dtm
library(wordcloud)
freq = data.frame(sort(colSums(as.matrix(title_content_dtm)), decreasing=TRUE))
wordcloud(rownames(freq), freq[,1], max.words=50, colors=brewer.pal(1, "Dark2"))
title_content_dtm_tfidf <- DocumentTermMatrix(title_content_corpus, control = list(weighting = weightTfIdf))
title_content_dtm_tfidf = removeSparseTerms(title_content_dtm_tfidf, 0.99)
title_content_dtm_tfidf
# The first document
inspect(title_content_dtm_tfidf[1,])
freq = data.frame(sort(colSums(as.matrix(title_content_dtm_tfidf)), decreasing=TRUE))
wordcloud(rownames(freq), freq[,1], max.words=100, colors=brewer.pal(1, "Dark2"))
dat_all_new = cbind(as.matrix(title_content_dtm_tfidf))
dat_all_new = data.frame(dat_all_new)
dat_all_train<-dat_all_new[1:(nrow(dat_all_new)-15000),]
dat_all_test<-tail(dat_all_new,15000)
#head(dat_all_new)
#dat_all_new  %>% mutate_if(is.factor,as.numeric)
head(dat_all)
head(dat_all_new)
tags_train<-tag_corpus$content[1:(nrow(dat_all_new)-15000)]
tag_corpus = Corpus(VectorSource(dat_all$tags))
tag_corpus = tm_map(tag_corpus, content_transformer(tolower))
tag_corpus = tm_map(tag_corpus, stripWhitespace)
tag_corpus = tm_map(tag_corpus, removeNumbers)
tag_corpus = tm_map(tag_corpus, removePunctuation,preserve_intra_word_dashes=T)
tags_train<-tag_corpus$content[1:(nrow(dat_all_new)-15000)]
tags_test<-tail(tag_corpus$content,15000)
head(tags_train)
tags_train_ohef<-cbind(tags_train, mtabulate(strsplit(tags_train, " ")))
install.packages('qdapTools')
library(qdapTools)
tags_train_ohef<-cbind(tags_train, mtabulate(strsplit(tags_train, " ")))
tags_train_ohef
head(tags_train_ohef)
View(tags_train_ohef)
dim(tags_train_ohef)
exit()
tags_train_ohe <- data.frame(lapply(tags_train_ohef, as.logical))
tags_test_ohef<-cbind(tags_test, mtabulate(strsplit(tags_test, " ")))
tags_test_ohef<-cbind(tags_test, mtabulate(strsplit(tags_test, " ")))
tags_test_ohe <- data.frame(lapply(tags_test_ohef, as.logical))
tags_test_ohe <- data.frame(lapply(tags_test_ohef, as.logical))
dat_all_train<-cbind(dat_all_train,tags_train_ohe)
dat_all_test<-cbind(dat_all_test,tags_test_ohe)
xy_test<-cbind(category=dat_all$category[1:(nrow(dat_all_new)-15000)],tags_train_ohef)
head(xy_test)
aggregate(xy_test[,2:3717] ~ xy_test[,1], xy_test, sum)
head(xy_test)
xy_test1 <- as.data.frame(xy_test)
head(xy_test1)
aggregate(xy_test[,2:3717] ~ xy_test[,1], xy_test, sum)
aggregate(xy_test[[,2:3717]] ~ xy_test[[,1]], xy_test, sum)
aggregate(xy_test[, 2:3717] ~ xy_test[,1], xy_test, sum)
aggregate(xy_test[[, 2:3717]] ~ xy_test[,1], xy_test, sum)
View(xy_test)
aggregate(xy_test[, 2:3717] ~ list(xy_test[, 1]), xy_test, sum)
aggregate(. ~ list(xy_test[, 1]), xy_test, sum)
aggregate(.~ xy_test[, 1], xy_test, sum)
xy_test$tags_train<-NULL
DT <- data.table(xy_test)
xy<-DT[, lapply(.SD,sum), by=list(category)]
xy<-DT[, lapply(.SD,sum), by=list(category)]
which(colSums(xy != 0)>2)
hello <- which(colSums(xy != 0)>2)
hello
hello <- as.data.frame(hello)
head(hello)
Dt
DT
xy
hello
hello <- which(colSums(xy != 0)>= 2)
hello <- as.data.frame(hello)
hello
hello <- which(colSums(xy != 0)> 2)
hello <- as.data.frame(hello)
hello
hello[2:nrow(hello),1]
hello[2:nrow(hello),0]
head(dat_all_train)
head(dat_all_train[, 841:])
head(dat_all_train[, 841:ncol(dat_all_train)])
head(dat_all_train[, 842:ncol(dat_all_train)])
hello <- hello[2:nrow(hello),0]
hello
hello <- hello[2:nrow(hello),]
type(hello)
hello
hello <- which(colSums(xy != 0)> 2)
hello <- as.data.frame(hello)
hello <- hello[2:nrow(hello),]
hello
hello <- which(colSums(xy != 0)> 2)
hello <- as.data.frame(hello)
hello
library(tidyr)
spread(hello)
hello
index(hello)
which(colSums(xy != 0)> 2)
hello <- which(colSums(xy != 0)> 2)
hello
hello <- xy[which(colSums(xy != 0)> 2)]
hello
which(colSums(xy != 0)> 2)
hello <- which(colSums(xy != 0)> 2)
hello
hello <- as.data.frame(spread(hello))
hello <- as.data.frame(hello)
hello
hello
rownames(hello)
hello <- which(colSums(xy != 0)> 2)
hello <- as.data.frame(hello)
hello <- hello[2:nrow(hello), ]
rownames(hello)
hello <- as.data.frame(hello)
hello <- hello[2:nrow(hello), 0]
rownames(hello)
hello <- which(colSums(xy != 0)> 2)
hello <- as.data.frame(hello)
rownames(hello)
hello <- rownames(hello)[2:nrow(hello)]
hello
{
if(!(varname %in% hello)){
hello <- paste("dat_all_train$", varname)
hello <- NULL
}
}
"alcohol" %in% hello
{
if(!(varname %in% hello)){
hello <- paste("dat_all_train$", varname)
hello <- NULL
}
}
names(dat_all_train[842:ncol(dat_all_train))
names(dat_all_train[842:ncol(dat_all_train)))
names(dat_all_train[842:ncol(dat_all_train)])
{
if(!(varname %in% hello)){
hello <- paste("dat_all_train$", varname)
hello <- NULL
}
}
"alcohol" %in% hello
{
if(!(varname %in% hello)){
hello <- paste("dat_all_train$", varname)
hello <- NULL
}
}
!("alcohol" %in% hello)
for(varname in names(dat_all_train[842:ncol(dat_all_train)])){
print(varname)
}
for(varname in names(dat_all_train[842:ncol(dat_all_train)])){
if(varname %in% hello){
print(varname)
}
}
for(varname in names(dat_all_train[842:ncol(dat_all_train)])){
if(!(varname %in% hello)){
print(varname)
}
}
hello123 <- paste("dat_all_train$", "alcohol")
hello123
hello123 <- paste("dat_all_train$", "alcohol", sep = '')
hello123
get(hello123)
dat_all_train$alcohol
get(hello123)
tags_train_ohe <- tags_train_ohe[, !(names(tags_train_ohe) %in% hello)]
tags_train_ohe
library(data.table)
library(ggplot2)
